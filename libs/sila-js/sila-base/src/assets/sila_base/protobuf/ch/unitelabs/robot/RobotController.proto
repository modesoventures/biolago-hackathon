// This file is automatically generated by sila2lib.proto_builder.proto_builder version 0.2.0
// :generation date: 2021-10-08 11:14:29
//
// ---- PLEASE DO NOT MODIFY MANUALLY !! ---

syntax = "proto3";
import "SiLAFramework.proto";
package sila2.ch.unitelabs.robot.robotcontroller.v1;

// Feature: Robot Controller
//   Controlling the robot
service RobotController {
    // Move To Position
    //   Move to a given position.
    rpc MoveToPosition(sila2.ch.unitelabs.robot.robotcontroller.v1.MoveToPosition_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc MoveToPosition_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc MoveToPosition_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.ch.unitelabs.robot.robotcontroller.v1.MoveToPosition_Responses) {}
    // Move To Site
    //   
    //               Moving to a given site including calculated approach positions (if any, and without changing gripping)
    //   
    rpc MoveToSite(sila2.ch.unitelabs.robot.robotcontroller.v1.MoveToSite_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc MoveToSite_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc MoveToSite_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.ch.unitelabs.robot.robotcontroller.v1.MoveToSite_Responses) {}
    // Retract
    //   Retract from current device if not retracted already
    rpc Retract(sila2.ch.unitelabs.robot.robotcontroller.v1.Retract_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc Retract_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc Retract_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.ch.unitelabs.robot.robotcontroller.v1.Retract_Responses) {}
    // Approach To
    //   
    //               Moving to the safe pose to approach a device (without changing gripping)
    //   
    rpc ApproachTo(sila2.ch.unitelabs.robot.robotcontroller.v1.ApproachTo_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc ApproachTo_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc ApproachTo_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.ch.unitelabs.robot.robotcontroller.v1.ApproachTo_Responses) {}
    // Move Plate
    //   Move a plate between two given sites
    rpc MovePlate(sila2.ch.unitelabs.robot.robotcontroller.v1.MovePlate_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc MovePlate_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc MovePlate_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.ch.unitelabs.robot.robotcontroller.v1.MovePlate_Responses) {}
    // Pick Plate
    //   Pick up a plate from a given site
    rpc PickPlate(sila2.ch.unitelabs.robot.robotcontroller.v1.PickPlate_Parameters) returns (sila2.ch.unitelabs.robot.robotcontroller.v1.PickPlate_Responses) {}
    // Place Plate
    //   Place a plate on a given site
    rpc PlacePlate(sila2.ch.unitelabs.robot.robotcontroller.v1.PlacePlate_Parameters) returns (sila2.ch.unitelabs.robot.robotcontroller.v1.PlacePlate_Responses) {}
    // Check Occupied
    //   Check if the given site is occupied with a sample
    rpc CheckOccupied(sila2.ch.unitelabs.robot.robotcontroller.v1.CheckOccupied_Parameters) returns (sila2.ch.unitelabs.robot.robotcontroller.v1.CheckOccupied_Responses) {}
    
    
}

// ----------------- Data Type definitions -----------------
// Site
//   Description of a given site of a device
message DataType_Site {
    message Site_Struct {
        // Device
        //   Device the site is associated with.
        sila2.org.silastandard.String Device = 1;
        // Site Index
        //   Index of the site to access
        // Constrained type, not reflected in protocol buffers
        sila2.org.silastandard.Integer SiteIndex = 2;
    }
    sila2.ch.unitelabs.robot.robotcontroller.v1.DataType_Site.Site_Struct Site = 1;
}

// ------ Command Parameter and Response definitions -------
message MoveToPosition_Parameters {
    sila2.org.silastandard.String Position = 1;
}

message MoveToPosition_Responses {
    
}

message MoveToSite_Parameters {
    sila2.ch.unitelabs.robot.robotcontroller.v1.DataType_Site Site = 1;
}

message MoveToSite_Responses {
    
}

message Retract_Parameters {
    
}

message Retract_Responses {
    
}

message ApproachTo_Parameters {
    sila2.ch.unitelabs.robot.robotcontroller.v1.DataType_Site Site = 1;
}

message ApproachTo_Responses {
    
}

message MovePlate_Parameters {
    sila2.ch.unitelabs.robot.robotcontroller.v1.DataType_Site OriginSite = 1;
    sila2.ch.unitelabs.robot.robotcontroller.v1.DataType_Site DestinationSite = 2;
    sila2.org.silastandard.String PlateType = 3;
}

message MovePlate_Responses {
    
}

message PickPlate_Parameters {
    sila2.ch.unitelabs.robot.robotcontroller.v1.DataType_Site Site = 1;
    sila2.org.silastandard.String PlateType = 2;
}

message PickPlate_Responses {
    
}

message PlacePlate_Parameters {
    sila2.ch.unitelabs.robot.robotcontroller.v1.DataType_Site Site = 1;
    sila2.org.silastandard.String PlateType = 2;
}

message PlacePlate_Responses {
    
}

message CheckOccupied_Parameters {
    sila2.ch.unitelabs.robot.robotcontroller.v1.DataType_Site Site = 1;
}

message CheckOccupied_Responses {
    sila2.org.silastandard.Boolean Occupied = 1;
}


// ----------------- Metadata Definitions ------------------
